{"version":3,"sources":["components/Users.js","lib/PreloadContext.js","containers/UsersContainer.js","components/User.js","containers/UserContainer.js","pages/UsersPage.js"],"names":["Users","users","map","user","to","id","username","PreloadContext","createContext","Preloader","resolve","preloadContext","useContext","done","promises","push","Promise","useEffect","React","connect","state","getUsers","User","email","name","UserContainer","useSelector","dispatch","useDispatch","usePreloader","getUser","parseInt","UsersPage","path","render","match","params"],"mappings":"2JAkBeA,EAfD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OAAKA,EAEH,8BACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,6BACE,cAAC,IAAD,CAAMC,GAAE,iBAAYD,EAAKE,IAAzB,SAAgCF,EAAKG,YAD9BH,EAAKE,WALH,M,gBCAfE,EAAiBC,wBAAc,MAIxBC,EAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpBC,EAAiBC,qBAAWL,GAClC,OAAKI,GACDA,EAAeE,MAKnBF,EAAeG,SAASC,KAAKC,QAAQN,QAAQA,MALb,MADJ,MCJtBO,EAAcC,IAAdD,UAgBOE,eACb,SAAAC,GAAK,MAAK,CACRnB,MAAOmB,EAAMnB,MAAMA,SAErB,CACEoB,cALWF,EAdQ,SAAC,GAAyB,IAAvBlB,EAAsB,EAAtBA,MAAOoB,EAAe,EAAfA,SAM/B,OAJAJ,GAAU,WACJhB,GACJoB,MACC,CAACA,EAAUpB,IAEZ,qCACE,cAAC,EAAD,CAAOA,MAAOA,IACd,cAAC,EAAD,CAAWS,QAASW,UCDXC,EAdF,SAAC,GAAc,IAAZnB,EAAW,EAAXA,KACNoB,EAA0BpB,EAA1BoB,MAAOC,EAAmBrB,EAAnBqB,KAAMlB,EAAaH,EAAbG,SACrB,OACE,gCACE,+BACGA,EADH,KACekB,EADf,OAGA,8BACE,wCADF,IACkBD,SCUTE,EAdO,SAAC,GAAY,IAAVpB,EAAS,EAATA,GACjBF,EAAOuB,aAAY,SAAAN,GAAK,OAAIA,EAAMnB,MAAME,QACxCwB,EAAWC,cAQjB,OHK0B,SAAAlB,GAC1B,IAAMC,EAAiBC,qBAAWL,GAC7BI,IACDA,EAAeE,MAKnBF,EAAeG,SAASC,KAAKC,QAAQN,QAAQA,OGnB7CmB,EAAa,kBAAMF,EAASG,YAAQzB,OACpCY,qBAAU,WACJd,GAAQA,EAAKE,KAAO0B,SAAS1B,EAAI,KACrCsB,EAASG,YAAQzB,MAChB,CAACsB,EAAUtB,EAAIF,IAEbA,EACE,cAAC,EAAD,CAAMA,KAAMA,IADD,M,OCFL6B,UATG,WAChB,OACE,qCACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,KAAK,aAAaC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,cAAC,EAAD,CAAe9B,GAAI8B,EAAMC,OAAO/B","file":"static/js/pages-UsersPage.00559c35.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Users = ({ users }) => {\n  if (!users) return null; // users가 유효하지 않다면 아무것도 보여주지 않음\n  return (\n    <div>\n      <ul>\n        {users.map(user => (\n          <li key={user.id}>\n            <Link to={`/users/${user.id}`}>{user.username}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Users;\n","import { createContext, useContext } from 'react';\n\n// 클라이언트 환경: null\n// 서버 환경:{ done: false, promises: [] }\nconst PreloadContext = createContext(null);\nexport default PreloadContext;\n\n// resolve는 함수 타입입니다.\nexport const Preloader = ({ resolve }) => {\n  const preloadContext = useContext(PreloadContext);\n  if (!preloadContext) return null; // context 값이 유효하지 않다면 아무것도 하지 않음\n  if (preloadContext.done) return null; // 이미 작업이 끝났다면 아무것도 하지 않음\n\n  // promises 배열에 프로미스 등록\n  // 설령 resolve 함수가 프로미스를 반환하지 않더라도, 프로미스 취급을 하기 위하여\n  // Promise.resolve 함수 사용\n  preloadContext.promises.push(Promise.resolve(resolve()));\n  return null;\n};\n\n// Hook 형태로 사용 할 수 있는 함수\nexport const usePreloader = resolve => {\n  const preloadContext = useContext(PreloadContext);\n  if (!preloadContext) return null;\n  if (preloadContext.done) return null;\n\n  // promises 배열에 프로미스 등록\n  // 설령 resolve 함수가 프로미스를 반환하지 않더라도, 프로미스 취급을 하기 위하여\n  // Promise.resolve 함수 사용\n  preloadContext.promises.push(Promise.resolve(resolve()));\n};\n","import React from 'react';\nimport Users from '../components/Users';\nimport { connect } from 'react-redux';\nimport { getUsers } from '../modules/users';\nimport { Preloader } from '../lib/PreloadContext';\n\nconst { useEffect } = React;\n\nconst UsersContainer = ({ users, getUsers }) => {\n  // 컴포넌트 마운트될 때 호출\n  useEffect(() => {\n    if (users) return; // users가 이미 유효하다면 요청하지 않음\n    getUsers();\n  }, [getUsers, users]);\n  return (\n    <>\n      <Users users={users} />\n      <Preloader resolve={getUsers} />\n    </>\n  );\n};\n\nexport default connect(\n  state => ({\n    users: state.users.users,\n  }),\n  {\n    getUsers,\n  }\n)(UsersContainer);\n","import React from 'react';\n\nconst User = ({ user }) => {\n  const { email, name, username } = user;\n  return (\n    <div>\n      <h1>\n        {username} ({name})\n      </h1>\n      <p>\n        <b>e-mail:</b> {email}\n      </p>\n    </div>\n  );\n};\n\nexport default User;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport User from '../components/User';\nimport { usePreloader } from '../lib/PreloadContext';\nimport { getUser } from '../modules/users';\n\nconst UserContainer = ({ id }) => {\n  const user = useSelector(state => state.users.user);\n  const dispatch = useDispatch();\n\n  usePreloader(() => dispatch(getUser(id))); // 서버 사이드 렌더링 할 때 API 호출하기\n  useEffect(() => {\n    if (user && user.id === parseInt(id, 10)) return; // 유저가 존재하고, id가 일치한다면 요청하지 않음\n    dispatch(getUser(id));\n  }, [dispatch, id, user]); // id가 바뀔 때 새로 요청해야 함\n\n  if (!user) return null;\n  return <User user={user} />;\n};\n\nexport default UserContainer;\n","import React from 'react';\nimport UsersContainer from '../containers/UsersContainer';\nimport UserContainer from '../containers/UserContainer';\nimport { Route } from 'react-router-dom';\n\nconst UsersPage = () => {\n  return (\n    <>\n      <UsersContainer />\n      <Route path=\"/users/:id\" render={({ match }) => <UserContainer id={match.params.id} />} />\n    </>\n  );\n};\n\nexport default UsersPage;\n"],"sourceRoot":""}